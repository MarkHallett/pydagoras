{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to pydagoras","text":""},{"location":"#introduction","title":"Introduction","text":"<p>pydagoras is a Python package to create a Directed Acyclic Graph DAG </p> <p>This site is still under development.   if you have any suggestions for improvement, please give some feedback in the Was this page helpful? section at the bottom of each page.   The aim of this site is to document;</p> <ul> <li>The pypi package pydagoras that underpins the demo site.</li> <li>An example app that uses <code>pydagoras</code>.</li> <li>A demo site  where the example app can be seen and used.</li> </ul>"},{"location":"#package","title":"Package","text":"<p>pydagoras can be installed from PyPi, which can be reached using the Python link the bottom right corner of this page. The package section details;</p>"},{"location":"#example-use","title":"Example use","text":"<p>This section details an example of a front end, that connects to a backend pydagoras DAG, and shows the DAG graphicaly as it updates.</p>"},{"location":"#demo","title":"Demo","text":"<p>This section links to the demo site, it details how to use the demo site and to make and see changes to the DAGs. It also shows shows screenshots of example DAGs, as well as a video site showing three example pydagoras DAGs being updated.</p> <ul> <li>Other ways to get pydagoras</li> <li>What is included in the package</li> <li>How to constuct a DAG using pydagoras by creating and linking nodes</li> <li>Updating inputs</li> <li>Accessing the output</li> </ul>"},{"location":"#code-reference","title":"Code reference","text":"<p>This section allows you to look into the code behind the pydagoras package.</p>"},{"location":"demo/","title":"Demo","text":"<p>The demo site www.pydagoras.com provides the opertunity to update DAG inputs and see the DAG update.</p> <p>First it is required to make a websocket connection, this will supply the backend with input values, and allow the browser to recieve updated DAGs. To make this connection click the <code>connect</code> button, and see the connection status appear.    </p> <p>The following tabs match the tabs in the browser and show screen shots of the 3 example DAG images.</p> Basic DAGLong calculationDuplicate nodes <p></p> <p></p> <p></p> <p>Below each DAG there are input boxes for the DAG input values. Depending on the state of the toggle, values can be entered one at a time, or in bulk. When the DAG has been recaluclated the image of the DAG will be refreshed.</p> <p>The video below shows the demo site being used, where;</p> <ul> <li>Single then multiple updates are made to a basic DAG using the GUI.</li> <li>Then the back end is used to show updates to multipe DAGs and multiple nodes.</li> </ul>"},{"location":"example_use/","title":"Example use","text":"<p>A small example application has been created and hosted to demonstrate how the <code>pydagoras</code> package can be used. The source code for the application is available on GitHub.</p>"},{"location":"example_use/#system-overview","title":"System overview","text":"<p>The diagram below shows how the website connects, using websockets, to the front end process, and which connects to the backend process using FastAPI.    </p>"},{"location":"example_use/#front-end","title":"Front end","text":"<p>The frontend process running on the pydagoras sever provides a secure web site at www.pydagoras.com. On three tabs the site shows three different DAGs to demonstrate how the pydagoras Python package can be used to  create DAGs. It is possible to update the inputs of these DAGs either individually or in bulk, and see the resulting effect on the DAGs. From a browser it is necessary to open a secure websocket to the frontend process, which collects updates to the input data, and passes it on to the backend using FastAPI.</p>"},{"location":"example_use/#backend","title":"Backend","text":"<p>The backend process creates three example DAGs, it does this by defining each of the nodes in tearms of input parameters and a calculation function. When an input changes the output of the node is recalculated, this new output is then passed to input nodes further along the DAG. Finally when the output of the DAG is changed, the new status of the whole DAG is returned.</p>"},{"location":"more_docs/","title":"More docs","text":"<p>more docs </p>"},{"location":"package/","title":"Package","text":""},{"location":"package/#how-to-download-and-install-pydagroas","title":"How to download and install pydagroas","text":"<p>Warning</p> <p>It is good practice to install into a virtual env</p> <p>To download the package from pypi and install into site-apckages use</p> <pre><code>pip install pydagoras\n</code></pre> <p>To download and install a particular version from github use</p> <pre><code>pip install git+https://github.com/MarkHallett/pydagoras@v0.0.7\n</code></pre>"},{"location":"package/#how-to-use","title":"How to use","text":"<p>The code below will create the DAG in the diagram below. </p>"},{"location":"package/#creating-the-nodes","title":"Creating the nodes","text":"<p>within a class derived from <code>pydagoras.DAG</code> first define the calculation within the nodes, then create the nodes.</p> defining the DAG<pre><code># output node\nself.o = self.makeNode(label='GBP/USD/EUR',\n                       calc=None,usedby = [],\n                       nodetype='out')\n\n# internal nodes\nself.i1 = self.makeNode(label='calc_B',\n                        calc=self.calcRateB,\n                        usedby=[self.o], nodetype='internal')\n\nself.i2 = self.makeNode(label='calc_A',\n                        calc=self.calcRateA,\n                        usedby=[self.bb], nodetype='internal')\n\n# input nodes\nself.a = self.makeNode(label='gbp-usd',\n                       calc=None,usedby=[self.i2], \n                       nodetype='in')\n\nself.b = self.makeNode(label='usd-eur',\n                       calc=None,usedby=[self.i2], \n                       nodetype='in')\n\nself.c = self.makeNode(label='eur-gbp',\n                       calc=None,usedby=[self.i1], \n                       nodetype='in')\n</code></pre>"},{"location":"package/#defining-node-calculations","title":"Defining node calculations","text":"updating nodes<pre><code>@dag_dot.calc\ndef calcRateA(self, node=None):\n    return self.a.value * self.b.value\n\n@dag_dot.calc\ndef calcRateB(self, node=None):\n    return self.i.value * self.c.value\n</code></pre>"},{"location":"package/#updating-nodes","title":"Updating nodes","text":"updating nodes<pre><code>my_dag.set_input('a',1.5)\nmy_dag.set_input('b',0.75)\nmy_dag.set_input('c',0.9)\n</code></pre>"},{"location":"package/#dag-output","title":"DAG output","text":"DAG output value<pre><code>my_dag.o.value\n</code></pre>"},{"location":"reference/","title":"Code reference","text":"<p>This page documents the code in the pydagoras package, and has been made with the help of mkdocstrings.</p>"},{"location":"reference/#dag_dotpy","title":"dag_dot.py","text":""},{"location":"reference/#pydagoras.dag_dot.DAG","title":"<code>DAG</code>","text":"<p>             Bases: <code>object</code></p> <p>Base DAG</p> Source code in <code>pydagoras/dag_dot.py</code> <pre><code>class DAG(object): # functionality\n    '''Base DAG '''\n    __shared_state = {}\n\n    def __init__(self, filename):\n        '''__init__'''\n        self.__dict__ = self.__shared_state\n\n        self.filename = filename\n        self.G=pgv.AGraph(directed=True,strict=True,rankdir='LR', label='Eg DAG')\n        self.input_nodes=[]\n        #print( self.G.to_string() )\n\n    def makeNode(self,label,calc,usedby,nodetype):\n        '''makeNode'''\n        n = Node(label,calc,usedby,nodetype)\n        if nodetype == 'in':\n            self.input_nodes.append(n)\n        self.defNode(n,usedby =usedby, nodetype=nodetype)\n        return n\n\n    def defNode(self,node,usedby,nodetype):\n        '''defNode'''\n        doc = node.doc\n        if not doc:\n            doc = 'qwerty'\n\n        if nodetype == 'in':\n            self.G.add_node(doc, shape=\"square\")\n            #node= self.AddInNode(doc)\n            for n in usedby:\n                self.AddEdge(doc,n.doc)\n        elif nodetype == 'internal':\n            #node= self.AddNode(doc,self.calcRateA)\n            for n in usedby:\n                self.AddEdge(doc,n.doc)\n        elif nodetype == 'out':\n            self.G.add_node(doc, color=\"white\")\n\n\n    def AddEdge(self,node1,node2):\n        self.G.add_edge(node1,node2,label='Undefined')\n        #print( self.G.to_string() )\n\n    def update_node(self,node1,node2,value):\n        #if node2.nodetype == 'out':\n        #    mr_mess_bus.publish(node.doc,value)\n\n        color = 'green'\n        fontcolor='blue'\n        if value == '-':\n            fontcolor='black'\n        elif value in ( 0, 'e'):\n            fontcolor='red'\n            color='red'\n\n        #self.G.add_node(node1,color=color,fontcolor=fontcolor,tooltip='hello')\n        #A [URL=\"[A|home]\" tooltip=\"A link\"]\n        self.G.add_node(node1,color=color,fontcolor=fontcolor,URL=node1+'.html',tooltip=node1)\n        self.G.add_edge(node1,node2, label=value,fontcolor=fontcolor,color=color)\n        print('added node and edge')\n        #print( self.G.to_string() )\n        self.dot_pp()\n\n        #t = threading.Timer(1, self.fade, args=(node1, node2,value,color) )\n        #t.start()\n\n    def fade(self,node1, node2,value,color):\n        print ('FADE')\n        1/0\n        fontcolor=color\n        color = color\n        self.G.add_node(node1,color=color,fontcolor=fontcolor,URL=node1+'.html',tooltip=node1)\n        self.G.add_edge(node1,node2, label=value,fontcolor=fontcolor,color=color)\n        self.dot_pp()\n        print('fade')\n\n\n\n    def set_input(self,doc,value):\n        for node in self.input_nodes:\n            if node.doc == doc:\n                logger.info ('set %s %s' %(node.doc,value))\n                for usedby in node.usedby:\n                     self.update_node(doc,usedby.doc, value=value)\n                self.setValue(node,value)\n\n                graph_def = self.G.to_string() \n                #print( graph_def )\n                return graph_def\n\n    def dot_pp(self):\n        pass\n        #print 'print dot and convert to png'\n        #self.G.layout(prog='dot') # layout with default (neato)\n        #print 'Draw'\n        #self.G.draw(self.filename)\n\n    def setValue(self,n,v):\n        if v == n.value:\n            return\n\n        # build the DAG\n        n.value = v\n        for u in n.usedby:\n           if u.calc == None:\n               continue\n           new_value = None\n           try:\n              #u.pp()\n              new_value = u.calc(node=n)\n           except Exception as e:\n              print (str(e))\n\n           self.setValue(u,new_value)\n\n           # if output print\n        print ('SET VALUE used by', n.usedby[0].doc)\n        if n.usedby[0].usedby == []:\n            #print '!! SET VALUE OF OUTPUT'\n            msg = 'update dag_dot.py %s %s' %(n.usedby[0].doc, n.value)\n            logger.info (msg)\n            #print msg\n            #print('dont publish')\n            #print( self.G.to_string() )\n            #publish.run(n.usedby[0].doc,str(n.value))\n            #mr_mess_bus.publish(n.usedby[0].doc,str(n.value))\n\n\n    def pp(self): # must be over ridden by a borg\n        # use doc string on class\n        print (self.__doc__)\n        for k, v in self.__dict__ .items():\n            if type(v) == type(Node()):\n                print (k,)\n                v.pp()\n\n    def ppInputs(self):\n        print (self.__doc__, ' Inputs')\n        for n in self.input_nodes:\n            n.pp()\n\n    def ppOutputs(self):\n        print (self.__doc__, ' Outputs')\n        for k, v in self.__dict__ .items():\n            if type(v) == type(pydagoras.Node()):\n                if v.usedby == []:\n                    print (k,)\n                    print ('=', v.value, v.doc)\n</code></pre>"},{"location":"reference/#pydagoras.dag_dot.DAG.__init__","title":"<code>__init__(filename)</code>","text":"<p>init</p> Source code in <code>pydagoras/dag_dot.py</code> <pre><code>def __init__(self, filename):\n    '''__init__'''\n    self.__dict__ = self.__shared_state\n\n    self.filename = filename\n    self.G=pgv.AGraph(directed=True,strict=True,rankdir='LR', label='Eg DAG')\n    self.input_nodes=[]\n</code></pre>"},{"location":"reference/#pydagoras.dag_dot.DAG.defNode","title":"<code>defNode(node, usedby, nodetype)</code>","text":"<p>defNode</p> Source code in <code>pydagoras/dag_dot.py</code> <pre><code>def defNode(self,node,usedby,nodetype):\n    '''defNode'''\n    doc = node.doc\n    if not doc:\n        doc = 'qwerty'\n\n    if nodetype == 'in':\n        self.G.add_node(doc, shape=\"square\")\n        #node= self.AddInNode(doc)\n        for n in usedby:\n            self.AddEdge(doc,n.doc)\n    elif nodetype == 'internal':\n        #node= self.AddNode(doc,self.calcRateA)\n        for n in usedby:\n            self.AddEdge(doc,n.doc)\n    elif nodetype == 'out':\n        self.G.add_node(doc, color=\"white\")\n</code></pre>"},{"location":"reference/#pydagoras.dag_dot.DAG.makeNode","title":"<code>makeNode(label, calc, usedby, nodetype)</code>","text":"<p>makeNode</p> Source code in <code>pydagoras/dag_dot.py</code> <pre><code>def makeNode(self,label,calc,usedby,nodetype):\n    '''makeNode'''\n    n = Node(label,calc,usedby,nodetype)\n    if nodetype == 'in':\n        self.input_nodes.append(n)\n    self.defNode(n,usedby =usedby, nodetype=nodetype)\n    return n\n</code></pre>"},{"location":"reference/#pydagoras.dag_dot.calc","title":"<code>calc(f1)</code>","text":"<p>calc</p> Source code in <code>pydagoras/dag_dot.py</code> <pre><code>def calc(f1):\n        ''' calc '''\n        def f3(self,*args, **kwargs):\n            node=kwargs['node']\n\n            for u_node in node.usedby:\n                for o_node in u_node.usedby:\n                    self.update_node(u_node.doc,o_node.doc, value='-')\n\n            try:\n                rtn = f1(self,*args, **kwargs)\n            except Exception as e:\n                print ('Error in %s: %s' %(u_node.doc,str(e)))\n                #rtn = str(e)\n                rtn = 'e'\n\n            for u_node in node.usedby:\n                for o_node in u_node.usedby:\n                    self.update_node(u_node.doc,o_node.doc, value=rtn)\n\n            self.dot_pp()\n            return rtn\n        return f3\n</code></pre>"},{"location":"reference/#nodepy","title":"node.py","text":""},{"location":"reference/#pydagoras.node.Node","title":"<code>Node</code>","text":"<p>             Bases: <code>object</code></p> <p>Node</p> Source code in <code>pydagoras/node.py</code> <pre><code>class Node(object):\n    ''' Node '''\n    def __init__(self,doc=None, calc=None,usedby=None, nodetype=None):\n        ''' __init__ '''\n        self.calc = calc\n        self.doc = doc\n        self.usedby = usedby\n        self.value = None\n        self.nodetype = nodetype\n\n    def pp(self):\n        ''' __pp__ '''\n        if self.usedby:\n            print (\"= %s, %s, used by, %s\" %( self.value , self.doc, [n.doc for n in self.usedby]))\n</code></pre>"},{"location":"reference/#pydagoras.node.Node.__init__","title":"<code>__init__(doc=None, calc=None, usedby=None, nodetype=None)</code>","text":"<p>init</p> Source code in <code>pydagoras/node.py</code> <pre><code>def __init__(self,doc=None, calc=None,usedby=None, nodetype=None):\n    ''' __init__ '''\n    self.calc = calc\n    self.doc = doc\n    self.usedby = usedby\n    self.value = None\n    self.nodetype = nodetype\n</code></pre>"},{"location":"reference/#pydagoras.node.Node.pp","title":"<code>pp()</code>","text":"<p>pp</p> Source code in <code>pydagoras/node.py</code> <pre><code>def pp(self):\n    ''' __pp__ '''\n    if self.usedby:\n        print (\"= %s, %s, used by, %s\" %( self.value , self.doc, [n.doc for n in self.usedby]))\n</code></pre>"},{"location":"test/","title":"Note","text":"<p>This is just a scratch page that has been used to practice code documentation.</p> <p>Lorem ipsum dolor sit amet, (1) consectetur adipiscing elit.</p> <ol> <li>:man_raising_hand: I'm an annotation! I can contain <code>code</code>, formatted     text, images, ... basically anything that can be expressed in Markdown.</li> </ol> <p>The <code>range()</code> function is used to generate a sequence of numbers.</p> <pre><code>theme:\n  features:\n    - content.code.annotate # (1)\n</code></pre> <ol> <li>:man_raising_hand: I'm a code annotation! I can contain <code>code</code>, formatted     text, images, ... basically anything that can be written in Markdown.</li> </ol> eg.py<pre><code>import this\n\ndef egfunc(i):\ntheme:\n  print (i) # (1)\n  features:\n    - content.code.annotate # (2)\n    - content.code.annotate # (3)\n</code></pre> <ol> <li>comment x I'm a code annotation! I can contain <code>code</code>, __formatted</li> <li>comment y I'm a code annotation! I can contain <code>code</code>, __formatted</li> <li>comment z I'm a code annotation! I can contain <code>code</code>, __formatted</li> </ol>"},{"location":"tobedone/","title":"Tobedone","text":"<p>to be done</p>"},{"location":"welcome/","title":"Welcome to pydagoras","text":""},{"location":"welcome/#introduction","title":"Introduction","text":"<p>pydagoras is a Python package to create a Directed Acyclic Graph DAG </p> <p>This site is still under development.   if you have any suggestions for improvement, please give some feedback in the Was this page helpful? section at the bottom of each page.   The aim of this site is to document;</p> <ul> <li>The pypi package pydagoras that underpins the demo site.</li> <li>An example app that uses <code>pydagoras</code>.</li> <li>A demo site  where the example app can be seen and used.</li> </ul>"},{"location":"welcome/#package","title":"Package","text":"<p>pydagoras can be installed from PyPi, which can be reached using the Python link the bottom right corner of this page. The package section details;</p>"},{"location":"welcome/#example-use","title":"Example use","text":"<p>This section details an example of a front end, that connects to a backend pydagoras DAG, and shows the DAG graphicaly as it updates.</p>"},{"location":"welcome/#demo","title":"Demo","text":"<p>This section links to the demo site, it details how to use the demo site and to make and see changes to the DAGs. It also shows shows screenshots of example DAGs, as well as a video site showing three example pydagoras DAGs being updated.</p> <ul> <li>Other ways to get pydagoras</li> <li>What is included in the package</li> <li>How to constuct a DAG using pydagoras by creating and linking nodes</li> <li>Updating inputs</li> <li>Accessing the output</li> </ul>"},{"location":"welcome/#code-reference","title":"Code reference","text":"<p>This section allows you to look into the code behind the pydagoras package.</p>"}]}