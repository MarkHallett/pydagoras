{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to pydagroas","text":""},{"location":"#introduction","title":"Introduction","text":"<p>pydagoras is a Python package to create Directed Acyclic Graphs (DAGs)   The aim of this site is to;</p> <ul> <li>Document the pypi package pydagoras that underpins the demo site.</li> <li>Show an example script that uses <code>pydagoras</code>.</li> <li>Document the demo site  where the example app can be seen and used.</li> <li>Explian how the how the demo app has been built.:</li> </ul>"},{"location":"#package","title":"Package","text":"<p>pydagoras can be installed from PyPi, which can be reached using the Python link the bottom right corner of this page. The package section details;</p> <ul> <li>Other ways to get pydagoras</li> <li>What is included in the package</li> </ul>"},{"location":"#example-script","title":"Example script","text":"<p>This section documents the script <code>eg_use_pydagoras.py</code> that is included in the test folder of the package. It provides an example of;</p> <ul> <li>How to constuct a DAG using pydagoras by creating and linking nodes</li> <li>Updating inputs</li> <li>Accessing the output</li> </ul>"},{"location":"#demo","title":"Demo","text":"<p>In this section there is a link to the demo site, it details how to use the demo site and how to make and see changes to the three example DAGs. It also shows a video showing the three example pydagoras DAGs being updated.</p>"},{"location":"#example-app","title":"Example app","text":"<p>This section explains how the example app has been built, with a front end, that connects to a backend that uses pydagoras. </p>"},{"location":"#code-reference","title":"Code reference","text":"<p>This section allows you to look into the code behind the pydagoras package.</p>"},{"location":"demo/","title":"Demo","text":"<p>The demo site www.pydagoras.com provides the oppertunity to update DAG inputs and see the DAG update.</p> <p>First the site makes a websocket connection, the connection status can be seen on the site. This allow the browser to recieve DAG updates.   Update to the dag can be made via the input boxes under the DAG.   The following tabs match the tabs in the demo and show screen shots of the 3 example DAG images, after they have been updated.</p> Basic DAGDuplicate nodes DAGFX DAG <p> This basic DAG is made up of 3 input nodes ( the square boxes towards the left), 3 internal nodes ( the oval shapes ) and an output on the right.</p> <p> In this DAG the node D is is used twice D_1 and D_2. It could have been drawn as a single node with 2 exit lines, but this representation becomes messy as the number of nodes increases.</p> <p> This DAG calculates the amount returend after cycling through 3 curreny pairs.</p> <p>On the demo site, below each DAG there are input boxes for the DAG input nodes. Under the input boxes is a toggle switch. Depending on the state of the toggle, values can be entered one at a time, or in bulk. These values are sent via an API to the backend. Once the DAG has been recaluclated, its image representation will be returned to the frontend to be displayed, and the DAG will then be refreshed in the browser.   The video below shows the demo site being used, where;</p> <ul> <li>Single then multiple updates are made to a basic DAG using the GUI.</li> <li>Then the back end is used to show updates to multipe DAGs and multiple nodes.</li> </ul>"},{"location":"example_app/","title":"Example app","text":"<p>A small example application has been created and hosted to demonstrate how the <code>pydagoras</code> package can be used. The source code for the application is available on GitHub.</p>"},{"location":"example_app/#system-overview","title":"System overview","text":"<p>The diagram below shows how the website connects, using websockets, to the front end process, and which connects to the backend process using FastAPI.    </p>"},{"location":"example_app/#front-end","title":"Front end","text":"<p>The frontend process running on the pydagoras sever provides a secure web site at www.pydagoras.com. On three tabs the site shows three different DAGs to demonstrate how the pydagoras Python package can be used to  create DAGs. It is possible to update the inputs of these DAGs either individually or in bulk, and see the resulting effect on the DAGs. From a browser it is necessary to open a secure websocket to the frontend process, which collects updates to the input data, and passes it on to the backend using FastAPI.</p>"},{"location":"example_app/#backend","title":"Backend","text":"<p>The backend process creates three example DAGs, it does this by defining each of the nodes in tearms of input parameters and a calculation function. When an input changes the output of the node is recalculated, this new output is then passed to input nodes further along the DAG. Finally when the output of the DAG is changed, the new status of the whole DAG is returned.</p>"},{"location":"example_script/","title":"Example script","text":"<p>In the pydagoras github repository folder <code>tests</code> includes the script <code>eg_use_pydagoras.py</code></p> <p>The following simple DAG   will be created, updated and displayed by the following code</p> <p>Import the necessary code from pydagoras<pre><code>from pydagoras.dag_dot import DAG_dot, calc\n</code></pre> Define the node calculations<pre><code>    @calc\n    def tripple(node=None):\n        return node.get_value() * 3\n</code></pre> Create the DAG<pre><code>    dag = DAG_dot(label='Eg DAG')\n</code></pre> Define the input node and single calculation node<pre><code>    n2 = dag.makeNode('x3', calc=tripple, tooltip='multiply')\n    n1 = dag.makeNode('In', calc=None, usedby=[n2], nodetype='in')\n</code></pre> Print the initial DAG<pre><code>    print(dag.G.to_string())  \n</code></pre> Update the DAG input<pre><code>    dag.set_input('In', 10)\n</code></pre> Print the final DAG<pre><code>    print(dag.G.to_string()) \n</code></pre>  Putting it all together...</p> eg_use_pydagoras.py<pre><code># eg_use_pydagoras.py\n#\u00a0a script to provide an example of creating and using a DAG using pydagoras\n\nfrom pydagoras.dag_dot import DAG_dot, calc\n\ndef run():\n\n    print('#######################################')\n\n    @calc\n    def tripple(node=None):\n        return node.get_value() * 3\n\n    dag = DAG_dot(label='Eg DAG')\n    n2 = dag.makeNode('x3', calc=tripple, tooltip='multiply')\n    n1 = dag.makeNode('In', calc=None, usedby=[n2], nodetype='in')\n\n    print('Initial DAG')\n    print(dag.G.to_string()) # (1)\n\n    print('Updates --------------')\n    dag.set_input('In', 10)\n\n    print('Outputs --------------')\n    dag.ppInputs() # (2)\n    dag.ppOutput() # (3)\n    dag.pp() \n\n    print('Final DAG')\n    print(dag.G.to_string()) # (4)\n\nif __name__ == '__main__':\n    run()\n    print('Done.')\n</code></pre> <ol> <li> <pre>strict digraph  {\n    graph [label=\"Eg DAG\",\n        labelloc=t,\n        rankdir=LR\n    ];\n    out  [color=white];\n    x3   [tooltip=multiply];\n    x3 -&gt; out    [fontname=Courier,\n        label=Undefined];\n    In   [shape=square];\n    In -&gt; x3     [fontname=Courier,\n        label=Undefined];\n}</pre></li> <li><pre>DAG: Eg DAG\nInputs:\nNODE: in, id:In, value:10\n      display_name:In tooltip:\n      calc: None usedby:x3</pre></li> <li><pre> NODE: out, id:out, value:30\n      display_name:out tooltip: \n      calc: .calc_out at 0x1007b9b20&gt; usedby:None\n    \n<li> <pre>strict digraph  {\n    graph [label=\"Eg DAG\",\n        labelloc=t,\n        rankdir=LR\n    ];\n    out  [color=white];\n    x3   [color=green,\n        fontcolor=blue,\n        tooltip=multiply];\n    x3 -&gt; out    [color=green,\n        fontcolor=blue,\n        fontname=Courier,\n        label=30];\n    In   [color=green,\n        fontcolor=blue,\n        shape=square];\n    In -&gt; x3     [color=green,\n        fontcolor=blue,\n        fontname=Courier,\n        label=10];\n}</pre></li>"},{"location":"package/","title":"Package","text":""},{"location":"package/#how-to-download-and-install-pydagroas","title":"How to download and install pydagroas","text":"<p>To download the package from pypi and install into site-apckages use</p> <pre><code>pip install pydagoras\n</code></pre> <p>To download and install a particular version eg 0.0.13 from github use</p> <pre><code>pip install git+https://github.com/MarkHallett/pydagoras@v0.0.13\n</code></pre> <p>Warning</p> <p>It is good practice to install into a virtual env</p> <p>The <code>pygraphviz</code> dependency will also be installed. This package is used to create the DAG images.</p> <p>Also included in the package source (aviailable from github) are two files in the test folder, which are a file containing unit tests, and a script that shows basic use of the package.</p>"},{"location":"reference/","title":"Code reference","text":"<p>This page show the files that in the pydagoras package that contribute to the <code>DAG_dot</code> base class.</p> <p>node.py</p> <p>class Node </p> Source code in <code>pydagoras/node.py</code> <pre><code>class Node:\n    def __init__(self, node_id=None, calc=None, usedby=None, nodetype=None, display_name=None, tooltip='notset'):\n        self.calc = calc\n        self.node_id = node_id\n        self.usedby = usedby\n        #self.value = None\n        self.dag = DAG()   \n        self.dag.set_value(node_id, None)\n\n        self.nodetype = nodetype\n        if display_name:\n            self.display_name = display_name\n        else:\n            self.display_name = node_id\n        self.tooltip = tooltip\n        self.orig_tooltip = tooltip\n\n    def pp(self):\n        print(f'NODE: {self.nodetype}, id:{self.node_id}, value:{self.get_value()}')\n        print(f'      display_name:{self.display_name} tooltip:{self.tooltip} ')\n        print(f'      calc: {self.calc} usedby:{self.usedby[0].node_id if self.usedby else None}')\n\n    def set_tooltip(self, tooltip):\n        self.tooltip = tooltip\n\n    def set_value(self, value):\n        self.dag.set_value(self.node_id, value)\n\n    def get_value(self):\n        return self.dag.get_value(self.node_id)\n</code></pre> <p>dag.py</p> <p>class DAG </p> Source code in <code>pydagoras/dag.py</code> <pre><code>class DAG: # implementation\n    __shared_state = {}\n\n    def __init__(self):\n        self.__dict__ = self.__shared_state\n\n        if hasattr(self,'values'):\n            return\n\n        self.values = {}\n\n    def set_value(self, key, value):\n        self.values[key] = value\n\n    def get_value(self, key):\n        return self.values.get(key, None)\n</code></pre> <p>dag_dot.py</p> <p>class DAG_dot </p> Source code in <code>pydagoras/dag_dot.py</code> <pre><code>class DAG_dot:\n\n    def __init__(self, label):\n        logger.info(f'creating {label=}')\n        self.label = label\n        self.dag = DAG()  # Initialize the DAG instance\n        self.G=pgv.AGraph(directed=True, strict=True, rankdir='LR', label=label, labelloc=\"t\")\n        self.input_nodes = []\n        self.internal_nodes = []\n        self.output_node = None\n        self.nodes = []  # List to keep track of all nodes\n\n\n        @calc\n        def calc_out(node=None):\n            return self.n_out.get_value() \n\n        self.n_out = self.makeNode('out', calc=calc_out, usedby=[], nodetype='out') \n\n\n    def makeNode(self,label,calc,usedby=None, nodetype='internal', display_name=None, tooltip=''):\n        if usedby is None:\n            usedby = [self.n_out]\n        n = Node(label,calc,usedby,nodetype,display_name,tooltip)\n        if nodetype == 'in':\n            self.input_nodes.append(n)\n        elif nodetype == 'out':\n            self.output_node = n\n        else:\n            self.internal_nodes.append(n)\n        self.nodes.append(n)  # Add the node to the list of all nodes\n\n        self.drawNode(n,usedby, nodetype, tooltip)\n        return n\n\n\n    def drawNode(self,node,usedby,nodetype,tooltip):\n        doc = node.display_name\n        if nodetype == 'in':\n            self.G.add_node(doc, shape=\"square\", tooltip=tooltip)\n            for n in usedby:\n                self.draw_edge(doc,n.display_name)\n        elif nodetype == 'internal':\n            self.G.add_node(doc, tooltip=tooltip)\n            for n in usedby:\n                self.draw_edge(doc,n.display_name)\n        elif nodetype == 'out':\n            self.G.add_node(doc, color=\"white\")\n\n\n    def draw_edge(self,node1,node2):\n        self.G.add_edge(node1,node2,label='Undefined', fontname=\"Courier\")\n\n\n    def update_node(self,node1,node2,value,tooltip='not set XXX'):\n        fontcolor, color = self.get_colors(value)\n        self.G.add_node(node1,color=color,fontcolor=fontcolor,tooltip=tooltip)\n        self.G.add_edge(node1,node2, label=value,fontcolor=fontcolor,color=color, fontname=\"Courier\")\n\n    # special cases\n    @classmethod\n    def get_colors(cls, value):\n        if value in ( 'e',):\n            return 'red', 'red'\n        return 'blue', 'green'\n\n    def set_input(self,node_id,value): # set values in all node\n        for node in self.nodes:\n            if node.node_id == node_id:\n                for usedby in node.usedby:\n                    self.update_node(node.display_name,usedby.node_id, value=value, tooltip=node.tooltip)\n                    self.set_input(usedby.node_id, value)  #\u00a0recursion \n                    #self.setValue(node, value)\n                self.setValue(node, value)\n\n\n    def setValue(self,n,v):\n        if v == self.dag.get_value(n):\n            return\n\n        # build the DAG\n        n.set_value(v) \n        x = self.dag.get_value(n.node_id)\n\n        for u in n.usedby:\n            if u.calc == None:\n                continue\n            try:\n                #new_value = u.calc(node=n)\n                #new_value = u.calc(self, node=n)\n                new_value = u.calc(self, node=n)  # Call the calc function with self and node\n            except Exception as e:\n                print('Error in setValue')\n                print (str(e))\n                new_value = 'ee' # ??\n\n\n            self.dag.set_value(u.node_id, new_value)\n            #self.set_value(u,new_value)\n            #self.setValue(u,new_value)\n\n        if not n.usedby:\n            return\n\n        if n.usedby[0].usedby == []: #\u00a0output node\n            #\u00a0not shown!\n            msg = 'update dag_dot.py %s %s' %(n.usedby[0].node_id, n.get_value())\n            logger.info (msg)\n            #print(msg)\n\n\n    def ppInputs(self):\n        for n in self.input_nodes:\n            n.pp()\n\n    def ppInternals(self):\n        for n in self.internal_nodes:\n            n.pp()\n\n    def ppOutput(self):\n        self.output_node.pp()\n\n    def pp(self):\n        print('==============') \n        print(f'DAG: {self.label}')\n        print('Inputs:')\n        self.ppInputs()\n        print('Internals:')\n        self.ppInternals()\n        print('Output:')\n        self.ppOutput()\n\n    def ppValues(self):\n        print(self.dag.values)  # Print the values of all nodes in the DAG\n\n    def get_value(self):\n         return self.dag.get_value(self.label)\n\n    def set_value(self, node, value):\n        self.dag.set_value(node.node_id, value)\n        self.setValue(node,value)\n</code></pre> <p>function calc </p> Source code in <code>pydagoras/dag_dot.py</code> <pre><code>def calc(f1): #\u00a0decorator deffinition\n    @wraps(f1)\n    def f3(dag, *args, **kwargs):\n        node=kwargs['node']\n\n        u_node = node.usedby[0] if node.usedby else None\n        #        self.update_node(u_node.node_id,o_node.node_id, value='-', tooltip=node.tooltip)\n\n        try:\n            rtn = f1(*args, **kwargs) # Call the original function\n            u_node.set_value(rtn)  # Set the value of the node\n            u_node.set_tooltip(u_node.orig_tooltip)  # Set the tooltip of the node\n\n        except Exception as e:\n            print ('Error in %s: %s' %(u_node.node_id,str(e)))\n            rtn = 'e'\n            u_node.set_value(rtn)  # Set the value of the node\n            print('o'*20)\n            u_node.set_tooltip(str(e))  # Set the tooltip of the node\n\n        #print('checking nodes to update....')\n        for u_node in node.usedby:\n            #print(f'Updating node: {u_node.node_id} with value: {rtn}')\n            dag.set_input(u_node.node_id, rtn)\n\n        return rtn\n    return f3\n</code></pre>"},{"location":"test/","title":"Note","text":"<p>This is just a scratch page that has been used to practice code documentation.</p> <p>Lorem ipsum dolor sit amet, (1) consectetur adipiscing elit.</p> <ol> <li>:man_raising_hand: I'm an annotation! I can contain <code>code</code>, formatted     text, images, ... basically anything that can be expressed in Markdown.</li> </ol> <p>The <code>range()</code> function is used to generate a sequence of numbers.</p> <pre><code>theme:\n  features:\n    - content.code.annotate # (1)\n</code></pre> <ol> <li>:man_raising_hand: I'm a code annotation! I can contain <code>code</code>, formatted     text, images, ... basically anything that can be written in Markdown.</li> </ol> eg.py<pre><code>import this\n\ndef egfunc(i):\ntheme:\n  print (i) # (1)\n  features:\n    - content.code.annotate # (2)\n    - content.code.annotate # (3)\n</code></pre> <ol> <li>comment x I'm a code annotation! I can contain <code>code</code>, __formatted</li> <li>comment y I'm a code annotation! I can contain <code>code</code>, __formatted</li> <li>comment z I'm a code annotation! I can contain <code>code</code>, __formatted</li> </ol>"},{"location":"welcome/","title":"Welcome to pydagroas","text":""},{"location":"welcome/#introduction","title":"Introduction","text":"<p>pydagoras is a Python package to create Directed Acyclic Graphs (DAGs)   The aim of this site is to;</p> <ul> <li>Document the pypi package pydagoras that underpins the demo site</li> <li>Show an example script that uses <code>pydagoras</code></li> <li>Document the demo site  where the example app can be seen and used</li> <li>Explain how the how the demo app has been built</li> </ul>"},{"location":"welcome/#package","title":"Package","text":"<p>pydagoras can be installed from PyPi, which can be reached using the Python link the bottom right corner of this page. The package section details;</p> <ul> <li>Other ways to get pydagoras</li> <li>What is included in the package</li> </ul>"},{"location":"welcome/#example-script","title":"Example script","text":"<p>This section documents the script <code>eg_use_pydagoras.py</code> that is included in the test folder of the package. It provides an example of;</p> <ul> <li>How to constuct a DAG using pydagoras by creating and linking nodes</li> <li>Updating inputs</li> <li>Accessing the output</li> </ul>"},{"location":"welcome/#demo","title":"Demo","text":"<p>In this section there is a link to the demo site, it details how to use the demo site and how to make and see changes to the three example DAGs. It also shows a video showing the three example pydagoras DAGs being updated.</p>"},{"location":"welcome/#example-app","title":"Example app","text":"<p>This section explains how the example app has been built, with a front end, that connects to a backend that uses pydagoras. </p>"},{"location":"welcome/#code-reference","title":"Code reference","text":"<p>This section allows you to look into the code behind the pydagoras package.</p>"}]}