{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> <li><code>mkdocs gh-deploy</code> - push to github.io</li> </ul>"},{"location":"#pydagoras.dag_dot.DAG","title":"<code>DAG</code>","text":"<p>               Bases: <code>object</code></p> <p>Base DAG ok</p> Source code in <code>pydagoras/dag_dot.py</code> <pre><code>class DAG(object): # functionality\n    '''Base DAG ok'''\n    __shared_state = {}  # would be nice to use a collections.OrderedDict()\n    #__filename = None\n\n    def __init__(self, filename):\n        self.__dict__ = self.__shared_state\n\n        self.filename = filename\n        self.G=pgv.AGraph(directed=True,strict=True,rankdir='LR', label='Eg DAG')\n        self.input_nodes=[]\n        #print( self.G.to_string() )\n\n    def makeNode(self,label,calc,usedby,nodetype):\n        n = Node(label,calc,usedby,nodetype)\n        if nodetype == 'in':\n            self.input_nodes.append(n)\n        self.defNode(n,usedby =usedby, nodetype=nodetype)\n        return n\n\n    def defNode(self,node,usedby,nodetype):\n        doc = node.doc\n        if not doc:\n            doc = 'qwerty'\n\n        if nodetype == 'in':\n            self.G.add_node(doc, shape=\"square\")\n            #node= self.AddInNode(doc)\n            for n in usedby:\n                self.AddEdge(doc,n.doc)\n        elif nodetype == 'internal':\n            #node= self.AddNode(doc,self.calcRateA)\n            for n in usedby:\n                self.AddEdge(doc,n.doc)\n        elif nodetype == 'out':\n            self.G.add_node(doc, color=\"white\")\n\n\n    def AddEdge(self,node1,node2):\n        self.G.add_edge(node1,node2,label='Undefined')\n        #print( self.G.to_string() )\n\n    def update_node(self,node1,node2,value):\n        #if node2.nodetype == 'out':\n        #    mr_mess_bus.publish(node.doc,value)\n\n        color = 'green'\n        fontcolor='blue'\n        if value == '-':\n            fontcolor='black'\n        elif value in ( 0, 'e'):\n            fontcolor='red'\n            color='red'\n\n        #self.G.add_node(node1,color=color,fontcolor=fontcolor,tooltip='hello')\n        #A [URL=\"[A|home]\" tooltip=\"A link\"]\n        self.G.add_node(node1,color=color,fontcolor=fontcolor,URL=node1+'.html',tooltip=node1)\n        self.G.add_edge(node1,node2, label=value,fontcolor=fontcolor,color=color)\n        print('added node and edge')\n        #print( self.G.to_string() )\n        self.dot_pp()\n\n        #t = threading.Timer(1, self.fade, args=(node1, node2,value,color) )\n        #t.start()\n\n    def fade(self,node1, node2,value,color):\n        print ('FADE')\n        1/0\n        fontcolor=color\n        color = color\n        self.G.add_node(node1,color=color,fontcolor=fontcolor,URL=node1+'.html',tooltip=node1)\n        self.G.add_edge(node1,node2, label=value,fontcolor=fontcolor,color=color)\n        self.dot_pp()\n        print('fade')\n\n\n\n    def set_input(self,doc,value):\n        for node in self.input_nodes:\n            if node.doc == doc:\n                logger.info ('set %s %s' %(node.doc,value))\n                for usedby in node.usedby:\n                     self.update_node(doc,usedby.doc, value=value)\n                self.setValue(node,value)\n\n                graph_def = self.G.to_string() \n                #print( graph_def )\n                return graph_def\n\n    def dot_pp(self):\n        pass\n        #print 'print dot and convert to png'\n        #self.G.layout(prog='dot') # layout with default (neato)\n        #print 'Draw'\n        #self.G.draw(self.filename)\n\n    def setValue(self,n,v):\n        if v == n.value:\n            return\n\n        # build the DAG\n        n.value = v\n        for u in n.usedby:\n           if u.calc == None:\n               continue\n           new_value = None\n           try:\n              #u.pp()\n              new_value = u.calc(node=n)\n           except Exception as e:\n              print (str(e))\n\n           self.setValue(u,new_value)\n\n           # if output print\n        print ('SET VALUE used by', n.usedby[0].doc)\n        if n.usedby[0].usedby == []:\n            #print '!! SET VALUE OF OUTPUT'\n            msg = 'update dag_dot.py %s %s' %(n.usedby[0].doc, n.value)\n            logger.info (msg)\n            #print msg\n            #print('dont publish')\n            #print( self.G.to_string() )\n            #publish.run(n.usedby[0].doc,str(n.value))\n            #mr_mess_bus.publish(n.usedby[0].doc,str(n.value))\n\n\n    def pp(self): # must be over ridden by a borg\n        # use doc string on class\n        print (self.__doc__)\n        for k, v in self.__dict__ .items():\n            if type(v) == type(Node()):\n                print (k,)\n                v.pp()\n\n    def ppInputs(self):\n        print (self.__doc__, ' Inputs')\n        for n in self.input_nodes:\n            n.pp()\n\n    def ppOutputs(self):\n        print (self.__doc__, ' Outputs')\n        for k, v in self.__dict__ .items():\n            if type(v) == type(Node()):\n                if v.usedby == []:\n                    print (k,)\n                    print ('=', v.value, v.doc)\n</code></pre>"},{"location":"more_docs/","title":"More docs","text":"<p>more docs </p>"},{"location":"reference/","title":"Reference","text":""},{"location":"reference/#pydagoras.dag_dot.DAG","title":"<code>DAG</code>","text":"<p>               Bases: <code>object</code></p> <p>Base DAG ok</p> Source code in <code>pydagoras/dag_dot.py</code> <pre><code>class DAG(object): # functionality\n    '''Base DAG ok'''\n    __shared_state = {}  # would be nice to use a collections.OrderedDict()\n    #__filename = None\n\n    def __init__(self, filename):\n        self.__dict__ = self.__shared_state\n\n        self.filename = filename\n        self.G=pgv.AGraph(directed=True,strict=True,rankdir='LR', label='Eg DAG')\n        self.input_nodes=[]\n        #print( self.G.to_string() )\n\n    def makeNode(self,label,calc,usedby,nodetype):\n        n = Node(label,calc,usedby,nodetype)\n        if nodetype == 'in':\n            self.input_nodes.append(n)\n        self.defNode(n,usedby =usedby, nodetype=nodetype)\n        return n\n\n    def defNode(self,node,usedby,nodetype):\n        doc = node.doc\n        if not doc:\n            doc = 'qwerty'\n\n        if nodetype == 'in':\n            self.G.add_node(doc, shape=\"square\")\n            #node= self.AddInNode(doc)\n            for n in usedby:\n                self.AddEdge(doc,n.doc)\n        elif nodetype == 'internal':\n            #node= self.AddNode(doc,self.calcRateA)\n            for n in usedby:\n                self.AddEdge(doc,n.doc)\n        elif nodetype == 'out':\n            self.G.add_node(doc, color=\"white\")\n\n\n    def AddEdge(self,node1,node2):\n        self.G.add_edge(node1,node2,label='Undefined')\n        #print( self.G.to_string() )\n\n    def update_node(self,node1,node2,value):\n        #if node2.nodetype == 'out':\n        #    mr_mess_bus.publish(node.doc,value)\n\n        color = 'green'\n        fontcolor='blue'\n        if value == '-':\n            fontcolor='black'\n        elif value in ( 0, 'e'):\n            fontcolor='red'\n            color='red'\n\n        #self.G.add_node(node1,color=color,fontcolor=fontcolor,tooltip='hello')\n        #A [URL=\"[A|home]\" tooltip=\"A link\"]\n        self.G.add_node(node1,color=color,fontcolor=fontcolor,URL=node1+'.html',tooltip=node1)\n        self.G.add_edge(node1,node2, label=value,fontcolor=fontcolor,color=color)\n        print('added node and edge')\n        #print( self.G.to_string() )\n        self.dot_pp()\n\n        #t = threading.Timer(1, self.fade, args=(node1, node2,value,color) )\n        #t.start()\n\n    def fade(self,node1, node2,value,color):\n        print ('FADE')\n        1/0\n        fontcolor=color\n        color = color\n        self.G.add_node(node1,color=color,fontcolor=fontcolor,URL=node1+'.html',tooltip=node1)\n        self.G.add_edge(node1,node2, label=value,fontcolor=fontcolor,color=color)\n        self.dot_pp()\n        print('fade')\n\n\n\n    def set_input(self,doc,value):\n        for node in self.input_nodes:\n            if node.doc == doc:\n                logger.info ('set %s %s' %(node.doc,value))\n                for usedby in node.usedby:\n                     self.update_node(doc,usedby.doc, value=value)\n                self.setValue(node,value)\n\n                graph_def = self.G.to_string() \n                #print( graph_def )\n                return graph_def\n\n    def dot_pp(self):\n        pass\n        #print 'print dot and convert to png'\n        #self.G.layout(prog='dot') # layout with default (neato)\n        #print 'Draw'\n        #self.G.draw(self.filename)\n\n    def setValue(self,n,v):\n        if v == n.value:\n            return\n\n        # build the DAG\n        n.value = v\n        for u in n.usedby:\n           if u.calc == None:\n               continue\n           new_value = None\n           try:\n              #u.pp()\n              new_value = u.calc(node=n)\n           except Exception as e:\n              print (str(e))\n\n           self.setValue(u,new_value)\n\n           # if output print\n        print ('SET VALUE used by', n.usedby[0].doc)\n        if n.usedby[0].usedby == []:\n            #print '!! SET VALUE OF OUTPUT'\n            msg = 'update dag_dot.py %s %s' %(n.usedby[0].doc, n.value)\n            logger.info (msg)\n            #print msg\n            #print('dont publish')\n            #print( self.G.to_string() )\n            #publish.run(n.usedby[0].doc,str(n.value))\n            #mr_mess_bus.publish(n.usedby[0].doc,str(n.value))\n\n\n    def pp(self): # must be over ridden by a borg\n        # use doc string on class\n        print (self.__doc__)\n        for k, v in self.__dict__ .items():\n            if type(v) == type(Node()):\n                print (k,)\n                v.pp()\n\n    def ppInputs(self):\n        print (self.__doc__, ' Inputs')\n        for n in self.input_nodes:\n            n.pp()\n\n    def ppOutputs(self):\n        print (self.__doc__, ' Outputs')\n        for k, v in self.__dict__ .items():\n            if type(v) == type(Node()):\n                if v.usedby == []:\n                    print (k,)\n                    print ('=', v.value, v.doc)\n</code></pre>"},{"location":"test/","title":"Test","text":"<p>who knows </p>"}]}